1. 배열(Array)
배열은 여러개의 값을 묶어 순차적으로 나열 및 저장하는 객체입니다.
데이터를 추가, 삭제, 참조, 순회 등의 다양한 작업을 수행할 때 용이합니다.
배열은 [대괄호]를 사용하여 생성하고, 내부의 값은 요소라 하며 쉼표 ' , '로 구분해 나열합니다.



1-2. 배열의 특징
const arr =['가', '나', '다']
console.log(arr) // ['가', '나', '다']

    const arr = []; // 빈 배열 생성도 가능합니다.
    console.log(arr); // [] (length:0)

    const arr = [1, 2, 3];
    console.log(arr); // [1, 2, 3]

    const arr = new Array(4, 5, 6);
    console.log(arr); // [4, 5, 6]

    const arr = new Array(3);
    console.log(arr); // [empty x 3] (length:3)

    const arr = new Array(1);
    console.log(arr); // [empty] (length:1)
    console.log(arr[0]); // undefined > 요소가 하나도 없는 배열




1-3 배열의 요소에 접근하기
배열 [인덱스]
인덱스란 요소의 순서를 의미하며, 배열의 요소에 접근할때 사용됩니다.
가장 첫번째 요소의 인덱스는 0번째로 표시합니다.

const arr =['가', '나' ,'다']
console.log(arr[0]); // '가' (arr의 첫번째 요소를 보여줍니다.)
console.log(arr[1]); // '나'
console.log(arr[2]); // '다'
console.log(arr[3]); // undefined (존재하지 않는 인덱스 값은 undefined로 출력합니다.)




1-4 배열의 요소 길이 확인하기
배열.length
배열의 'length' 프로퍼티를 이용하여 배열 내부에 들어있는 요소들의 개수를 확인 할 수 있습니다.

const arr = ['가', '나' ,'다']
arr.length // 3

const arr = ['lion', 'bear', 'sheep', 'monkey', 'horse']
arr.length // 5
arr[arr.length -1] // 'horse' (arr[5 - 1], 배열의 인덱스[4]의 값 'horse'를 출력합니다.)
arr[arr.length -3] // 'sheep'
arr[arr.length -5] // 'lion'




1-5 다차원 배열(Multi-Dimensional Array)
배열안에 다른 배열을 포함 할 수 있다. 즉, 배열이 배열의 요소가 될 수 있다. 행렬을 저장하는 용도 등으로 사용됩니다.

const arr = [
        [1, 2],
        [3, 4],
        [5, 6]
    ]
    console.log(arr[0][0]); // 1
    console.log(arr[0][1]); // 2
    console.log(arr[1][1]); // 4
    console.log(arr[2][1]); // 6
    console.log(arr[2][2]); // undefined

2차원 배열
    const arr = [
    [
        [1, 2],
        [3, 4]
    ],
    [
        [5, 6],
        [7, 8]
    ]
    ];
    console.log(arr[0][0][0]); // 1
    console.log(arr[0][0][1]); // 2
    console.log(arr[0][1][1]); // 4
    console.log(arr[1][0][0]); // 5
    console.log(arr[1][1][1]); // 8
    console.log(arr[2][0][1]); // Uncaught TypeError: Cannot read properties of undefined




1-6 배열의 메소드
1) shift()와 unshift()
shift()메소드는 배열의 첫번째 요소를 꺼내고 반환합니다.
unshift()메소드는 배열의 시작에 요소를 추가하고 배열의 길이(length)를 반환합니다.

예제1) const arr = [1, 2, 3];

arr.shift(); // 1 (arr의 첫번째 요소를 꺼내고 출력합니다.)
console.log(arr); // [2, 3] (shift 작업으로 첫번째 요소인 '1'을 제외하고 남은 요소들을 출력합니다.)

예제2) const arr = ['연필', '노트', '충전기', '보조배터리']
arr.shift(); // '연필' (arr의 첫번째 요소를 꺼내고 출력합니다.)
console.log(arr) // ['노트', '충전기', '보조배터리'] (shift 작업으로 첫번째 요소인 '연필'을 제외하고 남은 요소들을 출력합니다.

예제3) const arr = [1, 2, 3];

arr.unshift(0); // 4 (배열의 시작에 새로운 요소 '0'을 추가하여 arr 배열의 길이 4를 출력합니다.
console.log(arr); // [0, 1, 2, 3] (배열 시작에 추가한 요소 '0'을 포함하여 새로운 arr를 출력합니다.)

예제4) const arr = ['양배추', '사과', '오이']

arr.unshift('양파'); // 4 (배열의 시작에 새로운 요소 '양파'을 추가하여 arr 배열의 길이 4를 출력합니다.
console.log(arr); // ['양파', '양배추', '사과', '오이'] (배열 시작에 추가한 요소 '양파'을 포함하여 새로운 arr를 출력합니다.)




2) push()와 pop()
push()메소드는 배열의 끝에 새로운 요소를 추가하고, 배열의 길이(length)를 출력합니다.
pop()메소드는 배열의 마지막 요소를 꺼내어 반환합니다. 꺼낸 요소는 더이상 배열에 존재하지 않습니다. 즉 배열에서 제외됩니다.

예제1) const arr = [1, 2, 3]

arr.push(4); // 4 (배열의 끝에 새로운 요소 "4"를 추가하고,  arr 배열의 길이 4 를 출력합니다.)
console.log(arr); // [1, 2, 3, 4] (배열의 끝에 추가한 요소 "4"을 포함하여 새로운 arr를 출력합니다.)

예제2) const arr = ['강의듣기', '점심먹기', '산책하기']

arr.push('저녁먹기') // 4 (추가 push된 '저녁먹기' 요소를 포함하여 arr의 길이를 출력합니다.)
arr.push('필라테스 수업가기') // 5 (추가 push된 '필라테스 수업가기' 요소를 포함하여 arr의 길이를 출력합니다.)
console.log(arr); // ['강의듣기', '점심먹기', '산책하기', '저녁먹기', '필라테스 수업가기']

예제3) const arr = [1, 2, 3]
arr.pop(); // 3 (배열의 마지막요소 3을 꺼내어 출력합니다. 요소 "3"은 더이상 arr배열에 존재하지 않습니다.)
console.log(arr); // [1, 2]

예제4) const arr = ['봄', '여름', '가을', '겨울']
arr.pop(); // '겨울'
console.log(arr) // ['봄', '여름', '가을']




3)splice()
splice()메소드는 배열의 요소를 추가, 제거 또는 교체합니다. 메소드는 3개의 전달인자를 받습니다. 
첫번째 인자 : 삭제나 추가를 시작할 인덱스
두번째 인자 : 삭제할 요소의 개수
세번째 인자 : 추가할 요소들 (추가할 요소가 없다면 생략가능하고, 1개 이상의 요소들을 "," 콤마로 나열할 수 있다.)

함수이름.splice(삭제 또는 추가를 시작할 인덱스, 삭제할 요소 갯수, 추가할 요소들)

예제1)
const arr = [1, 2, 3]
arr.splice(0,1) // [1] : 삭제 한 요소 '1' 반환 ('0'번째 인덱스에서 '1'개의 요소를 삭제)
console.log(arr); // [2,3]

예제2)
const arr = [2, 3, 4]
arr.splice(0,0,0,1) // [] : 삭제한 요소가 없어서 반환값은 없음 ('0'번째 인덱스에서 '0'개의 요소를 삭제하고 '0'과 '1'을 요소로 추가)
console.log(arr); // [0, 1, 2, 3, 4]

예제3) splice의 사용방법에 대한 이해를 돕기위한 문제입니다.
아래 배열을 splice만을 사용하여 ['가', '나', '다', '라', '마', '바']로 출력하기

const arr = ['다', '라', '바']

1. '바' 삭제하기
arr.splice(2,1) // ['바']
console.log(arr); // ['다', '라']

2.'가','나' 추가하기
arr.splice(0,0,'가', '나') // [] : 삭제한 요소가 없어서 반환값은 없다.
console.log(arr) // '가', '나', '다', '라']

3. '마','바' 추가하기
arr.splice(4, 0, '마', '바') // [] : 삭제한 요소가 없어서 반환값은 없다.
console.log(arr); // ['가', '나', '다', '라', '마', '바']



4) slice()
slice()메서드는 배열에서 요소들을 추출하여 "새로운 배열"로 반환 하는 메서드 입니다. 즉, 기존 배열에는 아무런 영향을 주지 않습니다. 아래와 같이 두 개의 매개변수를 갖습니다.
첫번째 인자 : 추출을 시작할 인덱스, 음수인 경우 배열의 맨끝에서의 인덱스를 뜻합니다.
두번째 인자 : 추출을 끝낼 인덱스로 생략이 가능하며, 이 인덱스의 요소는 추출되지않습니다.
추출할 요소는 첫번째 인자에서 시작하여, 두번째 인자 바로 직전 요소까지 입니다. 

예제1) const arr = [1, 2, 3, 4, 5];
arr.slice(0, 3); // [1, 2, 3] ('0'번쨰 인덱스부터 '3'번째 인덱스 바로 직전 요소까지 추출, '3'번째 인덱스는 미포함)
console.log(arr); // [1, 2, 3, 4, 5] (기존 arr에는 아무런 영향을 주지 못합니다.)

예제2) const arr = ['red', 'orange', 'yellow', 'green', 'blue']
arr.slice(3, 5); // ['green', 'blue'] (arr.slice(3); 일때와 같은 값이 출력됩니다.)
console.log(arr); // ['red', 'orange', 'yellow', 'green', 'blue'] (기존 arr에는 아무런 영향을 주지 못합니다.)

예제3) const arr = ['1월', '2월', '3월', '4월', '5월', '6월']
arr.slice(2); // ['3월', '4월', '5월', '6월'] ('2'번째 인덱스 '3월'부터 마지막 요소 '6월'까지 출력됩니다.)
console.log(arr); // ['1월', '2월', '3월', '4월', '5월', '6월']

예제4) const arr = ['대한민국', '미국', '영국', '프랑스']
arr.slice(-2); //  ['영국', '프랑스'] (배열의 끝에서 요소를 '2'개 복사하여 출력합니다.)
console.log(arr); // ['대한민국', '미국', '영국', '프랑스']




5) sort()
sort()메소드는 배열의 요소를 정렬하는데 사용됩니다. 원본 배열을 직접 변경할 수 있으며, 메소드를 호출하면 배열을 변경하여 정렬된 배열을 반환합니다. 기본적으로는 오름차순으로 요소를 정렬합니다.

예제1) const kor = ['나', '마', '가', '라', '다'];
kor.sort(); // ['가', '나', '다', '라', '마']
console.log(kor) // ['가', '나', '다', '라', '마'] (원본 배열 kor이 새로운 배열로 정렬되어 출력됩니다.)

예제2) const num = [9, 3, 6, 12];
num.sort(); // [12, 3, 6, 9]
console.log(num); // [12, 3, 6, 9]
원소를 문자열로 전환한 후 유니코드 포인트의 순서대로 변환하기 떄문에 의도와 다른 순으로 정렬됩니다.
(참조 : 유니코드 https://en.wikipedia.org/wiki/List_of_Unicode_characters )
따라서 숫자형 데이터는 비교함수를 사용하여 정렬해야 오름차순으로 제대로 정렬됩니다.

예제3) const forest = ['tree', 'bushes', 'animal']
forest.sort(); // ['animal', 'bushes', 'tree']
console.log(forest); // ['animal', 'bushes', 'tree']

예제4) const forest = ['animal', 'bushes', 'tree']
forest.reverse(); // ['tree', 'bushes', 'animal']
console.log(forest); // ['tree', 'bushes', 'animal']
 


6) forEach()
forEach()메소드는 배열의 각 요소에 대해 주어진 함수를 실행합니다.
함수는 인자로 배열 요소, 인덱스를 받습니다. 배열의 요소를 순환하면서 해당 요소를 함수로 전달하여 함수가 각 요소에 대해 실행하게 됩니다.

예제1) const arr = [1, 2, 3, 4, 5];
const pows = [];
arr.forEach(item => pows.push(item ** 2)); // item에 arr 배열의 요소들이 차례대로 순회됩니다.
console.log(pows); // [1, 4, 9, 16, 25] (1**2, 2**2, 3**2, 4**2, 5**2 값이 각각 새롭게 배열되었습니다.)
console.log(arr); // [1, 2, 3, 4, 5]; (forEach 메서드는 원본 배열을 변환하지 않습니다.)

예제2) const num = [1, 2, 3, 4, 5];
num.forEach((item, index, arr) => { arr[index] = item ** 2; } );
console.log(num); // [1, 4, 9, 16, 25] (forEach 메서드는 원본 배열을 변환하지 않지만 콜백함수를 통해 num 배열을 새로운 배열로 변환 할 수 있습니다.)


7) concat()
concat()메소드는 인수로 추가 된 값들을 원본 배열의 마지막 요소로 추가하여 새로운 배열로 변환합니다.
만약 인수로 [배열]이 추가되면, 배열의 요소들을 해체하여 각각의 요소로 새로운 배열에 추가됩니다. 그러나 추가 된 원본 배열은 변경되지 않습니다.
push, unshift메소드와 비슷합니다. 그러나 두 메소드는 원본 배열이 직접 변경되며, concat메소드는 원본의 배열은 유지하고 새로운 배열을 반환한다는 차이점이 있습니다.

예제1) 두개의 배열 연결
const num1 = [1, 2];
const num2 = [3, 4, 5];

let result = num1.concat(num2);
console.log(result); // [1, 2, 3, 4, 5]
console.log(num1); // [1, 2] (기존 배열 num1, num2는 원본을 그대로 유지합니다.)
console.log(num2); // [3, 4, 5] 

예제2) 세개의 배열 연견
const arr1 = ['가', '나']
const arr2 = ['다']
const arr3 = ['라', '마', '바']

let result = arr1.concat(arr2, arr3);

console.log(result); // ['가', '나', '다', '라', '마', '바']
console.log(arr1); // ['가', '나']
console.log(arr2); // ['다']
console.log(arr3); // ['라', '마', '바']


예제3) 단일 요소 추가하기
const num1 = [1, 2];
let result = num1.concat(3);
console.log(result); // [1, 2, 3]
console.log(num1); // [1, 2]


예제4) 배열을 추가하기
const num1 = [1, 2];
let result = num1.concat(3, [4, 5, 6]);
console.log(result); // [1, 2, 3, 4, 5, 6] (인수로 전달 된 값이 배열인 경우, 배열을 해체하여 새로운 배열의 요소로 추가합니다.)
console.log(num1); // [1, 2]















