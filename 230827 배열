배열 정리
<교안 견고한 기본기-5.type2 객체타입 에서 발취한 내용들>
Type -> 원시타입(단순히 데이터 저장) / 객체타입(프로퍼티로 값(객체의 상태)과 매서드(객체의 동작)를 가짐)
원시타입 : 문자열,숫자형,논지자료형,undefined, null
객체타입 : 배열(array), 객체(object)

객체타입 특징
-값을 저장할때 값 자체가 아닌 값의 위치가 저장된다. 즉, 값의 참조(위치)가 저장된다.
1. 배열(Array) : 데이터를 순서대로 저장하는 객체 / (하나의 데이터를 표현하는 원시타입과 달리) 여러개의 데이터를 한 변수에 저장할 수 있기 떄문에, 데이터를 추가하거나 제거,정렬,검색 등 다양한 작업을 수행할 수 있도록 다양한 메소드를 제공한다.
1-1 배열의 특징
    1)배열은 빈 배열로 생성할 수 있고, 요소가 포함 된 배열로도 생성할 수 있습니다.
    const arr = [];
    console.log(arr); // [] (length:0)

    const arr = [1, 2, 3];
    console.log(arr); // [1, 2, 3]

    const arr = new Array(4, 5, 6);
    console.log(arr); // [4, 5, 6]

    const arr = new Array(3);
    console.log(arr); // [empty x 3] (length:3)

    const arr = new Array(1);
    console.log(arr); // [empty] (length:1)
    console.log(arr[0]); // undefined > 요소가 하나도 없는 배열

    new Array(number)를 사용하여 배열을 생성할 때
    number가 1개 이상일 경우에는 해당 숫자를 요소로 갖는 배열이 생성됩니다. 예를 들어, `const arr1 = new Array(4, 5, 6);`의 경우 [4, 5, 6]이라는 배열이 생성됩니다.
    하지만 number가 1개일 경우에는 배열의 길이를 나타내는 값으로 인식됩니다. `const arr1 = new Array(3);`의 경우 [empty, empty, empty]라는 배열이 생성되며, length 값이 3이 됩니다. 이때 배열의 요소는 undefined로 채워지게 됩니다.
    [empty *3]은 빈 요소를 나타내는 표기법으로, 배열의 요소가 존재하지 않음을 나타냅니다. 이는 배열의 요소가 undefined로 채워져 있지 않고, 아예 존재하지 않음을 의미합니다.
    -
    단일 숫자 인수가 전달되면 이 인수는 새 배열의 길이를 설정합니다. 예를 들어, `new Array(3)`은 길이가 3인 새 배열을 생성하며, 각 슬롯은 비어 있습니다. 이 경우 배열의 각 요소는 `undefined`로 설정되지 않습니다. 대신 각 슬롯은 비어 있으며 실제로 `undefined` 값을 가지고 있지 않습니다.

    따라서 `new Array(3)`을 호출하면 길이가 3인 새 배열이 생성되며, 각 슬롯은 비어 있습니다. 이것이 왜 `[empty *3]`이고 `length` 값이 3인지 설명합니다.

    const arr = new Array(3);
    console.log(arr.length); // 3
    console.log(arr[0]); // undefined; 실제로는 빈 슬롯입니다.
    console.log(0 in arr); // false
    위의 코드에서 `console.log(0 in arr);`는 첫 번째 요소가 실제로 `undefined`로 설정되어 있지 않음을 보여줍니다. 대신 그것은 빈 슬롯입니다.

    
    2) 숫자를 사용하여 '값'(순서)에 접근 할 수 있습니다.
    이 순서는 인덱스(index)라고 하며, 배열안에 존재하는 값들은 원소(elements)라고 합니다.
    (심지어 조재하지 않는 원소에도 접근 가능)
    const arr = [1, 2, 3];
 
    // 배열 안의 원소에 접근하기 위해서는 인덱스 번호를 이용합니다.
    console.log(arr[0]); // 1
    console.log(arr[1]); // 2
    console.log(arr[2]); // 3
    console.log(arr[3]); // undefined

    3) 'length' 프로퍼티
    기본
    const myArray = [1, 2, 3, 4, 5];
    console.log(myArray.length); // 5
    
    심화 length 프로퍼티는 가장 큰 인덱스에 1을 더한값이다.
    
    ex1)
    let dishes = [];
    dishes[10] = "미역국";
    console.log(dishes); // [empty x 10, '미역국']
    dishes.length; // 11

    ex2) 임의로 증가 또는 감소
    let arr = [1,2,3,4,5];
    arr.length; // 5

    arr.length = 2; // arr의 length를 임의로 줄여보자 5>2
    console.log(arr); // [1,2] // 줄여진 length에 맞춰서 arr가 재배열 되었다.

    arr.length = 5; // arr의 length를 임의로 다시 늘려보자 2>5
    console.log(arr); // [1,2, empty x 3] // 줄여진(삭제된) 요소 3,4,5는 사라지고 empty로 나머지 3개의 length가 채워진다.

    -> 이러한 특징을 이용하면 arr.length = 0; 을 사용하여 쉽게 배열을 비울 수 있다.


    4) 다차원 배열 
    배열안에 다른 배열을 포함할 수 있다. (배열이 배열의 요소가 될 수 있다.) 행렬을 저장하는 용도로 사용된다.

    const arr = [
        [1, 2],
        [3, 4],
        [5, 6]
    ];
    console.log(arr[0][0]); // 1
    console.log(arr[0][1]); // 2
    console.log(arr[1][1]); // 4
    console.log(arr[2][1]); // 6
    console.log(arr[2][2]); // undefined

    2차원 배열
    const arr = [
    [
        [1, 2],
        [3, 4]
    ],
    [
        [5, 6],
        [7, 8]
    ]
    ];
    console.log(arr[0][0][0]); // 1
    console.log(arr[0][0][1]); // 2
    console.log(arr[0][1][1]); // 4
    console.log(arr[1][0][0]); // 5
    console.log(arr[1][1][1]); // 8
    console.log(arr[2][0][1]); // Uncaught TypeError: Cannot read properties of undefined


    1-2 배열의 메소드  shift-pop , unshift-push

    1-2-1 shift()와 unshift()
        shift()메소드는 배열의 첫번째 요소를 꺼내고 반환.
        unshift()에소드는 배열의 시작에 요소를 추가, 길이(length)를 반환

        const arr = [1,2,3];

        arr.shift(); // 1 
        console.log(arr); // [2,3]

        arr.unshift(0); // 4 // 배열에 새로운 요소 0을 추가하여 arr.length= 4를 반환.
        console.log(arr); // [0,1,2,3]
    
    
    
    1-2-2 push()와 pop()
        pop()메소드는 배열의 마지막 요소를 꺼내어 반환, 꺼낸 요소는 더이상 배열에 존재X(배열에서 제외)
        push()메소드는 배열의 끝에 요소를 추가, 길이(length)를 반환

        const arr = [1, 2, 3];

        arr.push(4); // 4 // 배열에 새로운 요소 4를 추가하여 arr.length= 4 를 반환.
        console.log(arr); // [1, 2, 3, 4] 

        arr.pop(); // 4 // 배열의 마지막요소 4를 꺼내어 반환
        console.log(arr); // [1, 2, 3]

    1-2-3 splice()
        splice()메소드는 배열의 요소를 추가,제거 또는 교체합니다.
        메소드는 3개의 전달인자를 받습니다. 
        첫번째 인자 : 삭제나 추가를 시작할 인덱스
        두번째 인자 : 삭제할 요소의 개수
        세번째 인자 : 추가할 요소들 (추가할 요소가 없다면 생략가능)
        
        함수이름.splice(삭제 또는 추가를 시작할 인덱스, 삭제할 요소 갯수, 추가할 요소들)
        ex1)
        const arr = [1,2,3]

        arr.splice(0,1) // [1] : 삭제 한 요소 1 반환 ('0'번째 인덱스에서 '1'개의 요소를 삭제)
        console.log(arr); // [2,3]

        ex2)
        const arr = [2,3,4]

        arr.splice(0,0,0,1) // [] : 삭제한 요소가 없어서 반환값은 없다. ('0'번째 인덱스에서 '0'개의 요소를 삭제하고 '0','1'을 요소로 추가)
        console.log(arr); // [0, 1, 2, 3, 4]

        ex3) 아래 배열을 splice만을 사용하여 ['가', '나', '다', '라', '마', '바']로 완성시켜라.
        (*splice의 사용방법에 대한 이해를 돕기위한 문제입니다.)

        const arr = ['다', '라', '바']
        1. '바' 삭제
        arr.splice(2,1) // ['바']
        console.log(arr); // ['다', '라']

        2.'가','나' 추가하기
        arr.splice(0,0,'가', '나') // [] : 삭제한 요소가 없어서 반환값은 없다.
        console.log(arr) // '가', '나', '다', '라']

        3. '마','바' 추가하기
        arr.splice(4,0,'마','바') // [] : 삭제한 요소가 없어서 반환값은 없다.
        console.log(arr); // ['가', '나', '다', '라', '마', '바']


    1-2-4 slice()
        slice()메서드는 배열에서 요소들을 추출하여 "새로운 배열"로 반환 하는 메서드 입니다.
        즉, 기존 배열에는 아무런 영향을 주지 않습니다.
        첫번째 인자 : 추출을 시작할 인덱스
        두번째 인자 : 추출을 끝낼 인덱스 (생략가능)
        추출할 요소는 첫번째 인자에서 시작하여, 두번째 인자 바로 직전 요소까지 입니다. 

        const arr = [1,2,3,4,5];
        arr.slice(0,3); // [1, 2, 3] // '0'번쨰 인덱스부터 '3'번째 인덱스 바로 직전 요소까지 추출

        console.log(arr); // [1,2,3,4,5] // 기존 arr에는 아무런 영향을 주지 못한다.

    1-2-5 sort() ** 다시보기...
        sort()메소드는 배열의 요소를 정렬하는데 사용됩니다. 메소드를 호출하면 배열을 변경하며, 정렬된 배열을 반환합니다.

        const kor = ['아', '바', '가', '라', '자'];
        kor.sort(); // ['가', '라', '바', '아', '자']

        const num = [9,3,6,12];
        num.sort(); // [12, 3, 6, 9]
        원소를 문자열로 전환한 후 유니코드 포인트의 순서대로 변환하기 떄문에 의도와 다른 순으로 정렬된다.
        (유니코드 https://en.wikipedia.org/wiki/List_of_Unicode_characters )
        따라서 숫자형 데이터는 비교함수를 사용하여 정렬해야 한다.


    1-2-6 forEach()
        forEach()메소드는 배열의 각 요소에 대해 주어진 함수를 실행합니다.
        함수는 인자로 배열 요소, 인덱스를 받습니다.
        배열의 요소를 순환하면서 해당 요소를 함수로 전달> 함수가 각 요소에 대해 실행
        
